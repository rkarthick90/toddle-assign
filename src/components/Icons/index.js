// @flow
import React from "react";
import styled, { css } from "styled-components";
import theme from "../Theme";
import { Tooltip } from "../Globals";

/* eslint no-eval: 0 */

type Props = {
  glyph: string,
  size?: number | string,
  tipText?: string,
  tipLocation?: string,
  count?: ?string,
  color?: ?string,
  onClick?: Function,
  dataCy?: string,
};

export const InlineSvg = styled.svg`
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  height: 100%;
  width: 100%;
  color: inherit;
  fill: ${(props) =>
    props.color ? `${theme.colors[props.color]}` : "currentColor"};
`;

export const SvgWrapper = styled.div`
  display: inline-block;
  flex: 0 0 ${(props) => (props.size ? `${props.size}px` : "32px")};
  width: ${(props) => (props.size ? `${props.size}px` : "32px")};
  height: ${(props) => (props.size ? `${props.size}px` : "32px")};
  min-width: ${(props) => (props.size ? `${props.size}px` : "32px")};
  min-height: ${(props) => (props.size ? `${props.size}px` : "32px")};
  position: relative;
  color: inherit;
  cursor: pointer;

  @media (min-width: 768px) {
    ${(props) => (props.tipText ? Tooltip(props) : "")};
  }

  ${(props) =>
    props.count &&
    css`
      background-color: transparent;
      &:after {
        content: ${props.count ? `'${props.count}'` : `''`};
        position: absolute;
        left: calc(100% - 12px);
        top: -2px;
        font-size: 14px;
        font-weight: 600;
        background: ${theme.bg.default};
        color: ${({ theme }) =>
          process.env.NODE_ENV === "production"
            ? theme.text.default
            : theme.warn.alt};
        border-radius: 8px;
        padding: 2px 4px;
        border: 2px solid
          ${({ theme }) =>
            process.env.NODE_ENV === "production"
              ? theme.text.default
              : theme.warn.alt};
      }
    `};
`;

type GlyphProps = {
  glyph: string,
};

export const Glyph = ({ glyph }: GlyphProps) => {
  switch (glyph) {
    case "plus":
      return (
        <path
          d="M9.33337 6.13334V12.5333M6.13337 9.33334H12.5334M17.3334 9.33334C17.3334 13.7516 13.7517 17.3333 9.33337 17.3333C4.9151 17.3333 1.33337 13.7516 1.33337 9.33334C1.33337 4.91507 4.9151 1.33334 9.33337 1.33334C13.7517 1.33334 17.3334 4.91507 17.3334 9.33334Z"
          stroke="#284255"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      );
    case "left":
      return (
        <path
          d="M9.19719 13.0623L8.40442 13.774C8.06874 14.0753 7.52595 14.0753 7.19384 13.774L0.251758 7.545C-0.0839192 7.24365 -0.0839192 6.75636 0.251758 6.45821L7.19384 0.226013C7.52952 -0.0753378 8.07231 -0.0753378 8.40442 0.226013L9.19719 0.937715C9.53644 1.24227 9.52929 1.73918 9.1829 2.03733L4.87981 5.71766H15.143C15.6179 5.71766 16 6.06068 16 6.48706V7.51294C16 7.93932 15.6179 8.28235 15.143 8.28235H4.87981L9.1829 11.9627C9.53286 12.2608 9.54001 12.7577 9.19719 13.0623Z"
          fill="currentColor"
        />
      );
    case "right":
      return (
        <path
          d="M6.80281 0.937715L7.59558 0.226013C7.93126 -0.0753378 8.47405 -0.0753378 8.80616 0.226013L15.7482 6.455C16.0839 6.75635 16.0839 7.24365 15.7482 7.54179L8.80616 13.774C8.47048 14.0753 7.92769 14.0753 7.59558 13.774L6.80281 13.0623C6.46356 12.7577 6.47071 12.2608 6.8171 11.9627L11.1202 8.28235H0.857047C0.3821 8.28235 0 7.93932 0 7.51294V6.48706C0 6.06068 0.3821 5.71766 0.857047 5.71766H11.1202L6.8171 2.03733C6.46714 1.73918 6.45999 1.24227 6.80281 0.937715Z"
          fill="currentColor"
        />
      );
    case "move":
      return (
        <path
          d="M3.4 6.6L1 9M1 9L3.4 11.4M1 9H17M6.6 3.4L9 1M9 1L11.4 3.4M9 1V17M11.4 14.6L9 17M9 17L6.6 14.6M14.6 6.6L17 9M17 9L14.6 11.4"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
      );

    case "delete":
      return (
        <path
          d="M15.3333 2.28571H11.3333V1.42857C11.3333 1.04969 11.1577 0.686328 10.8452 0.418419C10.5326 0.15051 10.1087 0 9.66667 0H6.33333C5.89131 0 5.46738 0.15051 5.15482 0.418419C4.84226 0.686328 4.66667 1.04969 4.66667 1.42857V2.28571H0.666667C0.489856 2.28571 0.320287 2.34592 0.195262 2.45308C0.070238 2.56025 0 2.70559 0 2.85714C0 3.0087 0.070238 3.15404 0.195262 3.2612C0.320287 3.36837 0.489856 3.42857 0.666667 3.42857H1.375L2.16667 14.3186C2.22583 15.2775 3.08333 16 4.16667 16H11.8333C12.9221 16 13.7625 15.2936 13.8333 14.3214L14.625 3.42857H15.3333C15.5101 3.42857 15.6797 3.36837 15.8047 3.2612C15.9298 3.15404 16 3.0087 16 2.85714C16 2.70559 15.9298 2.56025 15.8047 2.45308C15.6797 2.34592 15.5101 2.28571 15.3333 2.28571ZM5.35708 13.7143H5.33333C5.16056 13.7144 4.99449 13.657 4.87013 13.5542C4.74577 13.4514 4.67282 13.3112 4.66667 13.1632L4.33333 5.16321C4.32703 5.01166 4.39123 4.86417 4.5118 4.75319C4.63237 4.64221 4.79944 4.57683 4.97625 4.57143C5.15306 4.56603 5.32513 4.62106 5.45461 4.7244C5.58409 4.82775 5.66037 4.97095 5.66667 5.1225L6 13.1225C6.00318 13.1976 5.98906 13.2724 5.95846 13.3428C5.92786 13.4132 5.88137 13.4777 5.82166 13.5326C5.76195 13.5876 5.69018 13.6319 5.61047 13.6631C5.53075 13.6943 5.44465 13.7117 5.35708 13.7143ZM8.66667 13.1429C8.66667 13.2944 8.59643 13.4398 8.47141 13.5469C8.34638 13.6541 8.17681 13.7143 8 13.7143C7.82319 13.7143 7.65362 13.6541 7.5286 13.5469C7.40357 13.4398 7.33333 13.2944 7.33333 13.1429V5.14286C7.33333 4.99131 7.40357 4.84596 7.5286 4.7388C7.65362 4.63163 7.82319 4.57143 8 4.57143C8.17681 4.57143 8.34638 4.63163 8.47141 4.7388C8.59643 4.84596 8.66667 4.99131 8.66667 5.14286V13.1429ZM10 2.28571H6V1.42857C5.9995 1.39093 6.00778 1.35358 6.02435 1.31873C6.04092 1.28387 6.06546 1.2522 6.09651 1.22558C6.12756 1.19896 6.16451 1.17793 6.20518 1.16373C6.24585 1.14952 6.28942 1.14243 6.33333 1.14286H9.66667C9.71058 1.14243 9.75415 1.14952 9.79482 1.16373C9.83549 1.17793 9.87244 1.19896 9.90349 1.22558C9.93454 1.2522 9.95908 1.28387 9.97565 1.31873C9.99222 1.35358 10.0005 1.39093 10 1.42857V2.28571ZM11.3333 13.1632C11.3272 13.3112 11.2542 13.4514 11.1299 13.5542C11.0055 13.657 10.8394 13.7144 10.6667 13.7143H10.6425C10.555 13.7116 10.4689 13.6942 10.3892 13.663C10.3096 13.6318 10.2379 13.5875 10.1782 13.5325C10.1185 13.4775 10.0721 13.4131 10.0415 13.3427C10.0109 13.2723 9.99682 13.1975 10 13.1225L10.3333 5.1225C10.3365 5.04746 10.3568 4.97368 10.3932 4.90537C10.4296 4.83707 10.4813 4.77557 10.5454 4.7244C10.6095 4.67323 10.6847 4.63338 10.7668 4.60714C10.8489 4.58089 10.9362 4.56876 11.0238 4.57143C11.1113 4.5741 11.1974 4.59153 11.2771 4.62272C11.3568 4.6539 11.4285 4.69824 11.4882 4.75319C11.5479 4.80814 11.5944 4.87264 11.625 4.94299C11.6556 5.01334 11.6698 5.08817 11.6667 5.16321L11.3333 13.1632Z"
          fill="currentColor"
        />
      );
    case "download":
      return (
        <path
          d="M10.2304 5.14261V0.361359H1.89709C1.34293 0.361359 0.897095 0.737531 0.897095 1.20511V17.5176C0.897095 17.9852 1.34293 18.3614 1.89709 18.3614H15.8971C16.4513 18.3614 16.8971 17.9852 16.8971 17.5176V5.98636H11.2304C10.6804 5.98636 10.2304 5.60667 10.2304 5.14261ZM13.4158 12.5732L9.39834 15.9377C9.12126 16.1701 8.67376 16.1701 8.39668 15.9377L4.37918 12.5732C3.95626 12.2192 4.25293 11.6114 4.84793 11.6114H7.56376V8.79886C7.56376 8.48808 7.86209 8.23636 8.23043 8.23636H9.56376C9.9321 8.23636 10.2304 8.48808 10.2304 8.79886V11.6114H12.9463C13.5413 11.6114 13.8379 12.2192 13.4158 12.5732ZM16.6054 4.05276L12.5263 0.607452C12.3388 0.449249 12.0846 0.361359 11.8179 0.361359H11.5638V4.86136H16.8971V4.64691C16.8971 4.42542 16.7929 4.21097 16.6054 4.05276Z"
          fill="currentColor"
        />
      );
    default:
      return null;
  }
};

class Icons extends React.Component<Props> {
  render() {
    const {
      size = 32,
      tipText,
      tipLocation,
      count,
      onClick,
      glyph,
      dataCy,
      color,
      viewBox,
    } = this.props;

    return (
      <SvgWrapper
        data-cy={dataCy}
        size={size}
        tipText={tipText}
        tipLocation={tipLocation}
        count={count}
        className="icon"
        onClick={onClick}
      >
        <InlineSvg
          fillRule="evenodd"
          clipRule="evenodd"
          strokeLinejoin="round"
          strokeMiterlimit="1.414"
          xmlns="http://www.w3.org/2000/svg"
          aria-labelledby="title"
          viewBox={viewBox || "0 0 32 32"}
          color={color}
          preserveAspectRatio="xMidYMid meet"
          fit
          id={glyph}
        >
          <Glyph glyph={glyph} />
        </InlineSvg>
      </SvgWrapper>
    );
  }
}

export default Icons;
